# This is a manual workflow, hence it must be placed in the default branch of a repository to enable and use
#Author: Rajesh Sanjeevi
#version: 1.0

name: Deploy Blockchain Network and Vault on blockchain cluster
on:
    workflow_dispatch:
        inputs:
            org_name:
                description: "ORGANIZATION NAME"
                required: true
                default: ""
            environment:
                description: "ENVIRONMENT"
                required: true
                default: ""
            action:
                description: "ACTION"
                required: true
                default: ""
            channel_name:
                description: "CHANNEL NAME"
                default: "defaultchannel"
                required: false
            chaincode_version:
                description: "CHAINCODE VERSION (when action=chaincode) (FORMAT: MMDDTTTT)"
                default: ""
                required: false
            add_org_name:
                description: "NEW ORGANIZATION NAME TO BE ADDED TO CHANNEL (when action=add_new_org)"
                default: ""
                required: false
            extra_vars:
                description: "EXTRA ARGUMENTS"
                default: ""
                required: false

jobs:
    blk-cluster-pipeline:
        environment: ${{ github.event.inputs.org_name }}_${{ github.event.inputs.environment }}
        name: ${{ github.event.inputs.action }}, org:${{ github.event.inputs.org_name }}, env:${{ github.event.inputs.environment }}, chan:${{ github.event.inputs.channel_name }}, other org:${{ github.event.inputs.add_org_name }}, xvars:${{ github.event.inputs.extra_vars }}, ccv:${{ github.event.inputs.chaincode_version }}
        runs-on: ubuntu-latest

        permissions:
            packages: write
            contents: read
        defaults:
            run:
                shell: bash
                working-directory: ansible-automation

        env:
            cluster_name: ${{ secrets.blk_cluster_name }}
            region: ${{ secrets.aws_region }}
            access_id: ${{ secrets.baf_user_access_key }}
            access_key: ${{ secrets.baf_user_secret_key }}
            account: ${{ secrets.aws_account_number }}
            repo_user: ${{ secrets.git_repo_user }}
            repo_user_token: ${{ secrets.git_repo_user_token }}
            repo_user_email: ${{ secrets.git_repo_user_email }}
            registry: ghcr.io/${{ secrets.baf_image_repo }}

        steps:
            - name: Checkout code
              uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

            - name: Configure AWS CLI
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.gitactions_user_access_key  }}
                  aws-secret-access-key: ${{ secrets.gitactions_user_secret_key }}
                  aws-region: ${{ secrets.aws_region }}
                  role-to-assume: ${{ secrets.gitactions_eksadm_role }}
                  role-external-id: ${{ secrets.gitactions_external_id }}
                  role-duration-seconds: 3600 # session valid for 60 minutes
                  role-session-name: github-actions
                  role-skip-session-tagging: true

            - name: Install Ansible and dependencies
              run: |
                  pip3 install openshift
                  sudo apt-get install -y python3-requests-oauthlib python-yaml jq
                  python -m pip install --user ansible==2.9.11

            - name: Install ansible galaxy collection for docker and k8s
              run: |
                  ansible-galaxy collection install community.docker
                  ansible-galaxy collection install community.kubernetes:==1.2.1

            - name: Setup kubectl
              run: |
                  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                  sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

            - name: Update kubeconfig and set context to blockchain cluster
              run: |
                  aws eks update-kubeconfig --region ${{ env.region }} --name ${{ env.cluster_name }}

            - name: Install Docker
              run: |
                  pip3 install docker

            - name: Log into GitHub Docker Registry
              uses: docker/login-action@v1
              with:
                  registry: ${{ env.registry }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Install Helm
              uses: azure/setup-helm@v1
              with:
                  version: v3.6.3

            - name: Deploy Vault cluster
              if: github.event.inputs.action == 'vault'
              run: |
                  ansible-playbook vault-setup.yml -i ./inventory/ansible_provisioners \
                    -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
                    -e "region=${{ env.region }}" \
                    -e "registry=${{ env.registry }}"

            - name: Cleanup Vault cluster
              if: github.event.inputs.action == 'vault_cleanup'
              run: |
                  ansible-playbook vault-cleanup.yml -i ./inventory/ansible_provisioners \
                    -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
                    -e "region=${{ env.region }}" \
                    -e "registry=${{ env.registry }}"

            #   - name: Build and publish baf image
            #     if: github.event.inputs.action == 'baf_image'
            #     run: |
            #       ansible-playbook baf-image.yml -i ./inventory/ansible_provisioners \
            #         -e "registry=${{ env.registry }}"

            - name: Build and push baf image
              if: github.event.inputs.action == 'baf_image'
              uses: docker/build-push-action@v2
              with:
                  context: ansible-automation/roles/baf/image
                  push: true
                  tags: |
                      ${{ env.registry }}/openidl-baf:latest

            - name: Deploy network
              if: github.event.inputs.action == 'deploy_network'
              run: |
                  ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners \
                    -e "action=${{ github.event.inputs.action }}" \
                    -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
                    -e "cluster_name=${{ env.cluster_name }}" \
                    -e "region=${{ env.region }}" \
                    -e "access_id=${{ env.access_id }}" \
                    -e "access_key=${{ env.access_key }}" \
                    -e "account=${{ env.account }}" \
                    -e "gitops_repo_user=${{ env.repo_user }}" \
                    -e "gitops_repo_user_token=${{ env.repo_user_token }}" \
                    -e "gitops_repo_user_email=${{ env.repo_user_email }}" \
                    -e "registry=${{ env.registry }}"

            - name: Reset node
              if: github.event.inputs.action == 'reset'
              run: |
                  ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners \
                    -e "action=${{ github.event.inputs.action }}" \
                    -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
                    -e "cluster_name=${{ env.cluster_name }}" \
                    -e "region=${{ env.region }}" \
                    -e "access_id=${{ env.access_id }}" \
                    -e "access_key=${{ env.access_key }}" \
                    -e "account=${{ env.account }}" \
                    -e "gitops_repo_user=${{ env.repo_user }}" \
                    -e "gitops_repo_user_token=${{ env.repo_user_token }}" \
                    -e "gitops_repo_user_email=${{ env.repo_user_email }}" \
                    -e "registry=${{ env.registry }}"

            - name: Deploy chaincode
              if: github.event.inputs.action == 'chaincode'
              run: |
                  ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners \
                    -e "action=${{ github.event.inputs.action }}" \
                    -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
                    -e "cluster_name=${{ env.cluster_name }}" \
                    -e "region=${{ env.region }}" \
                    -e "access_id=${{ env.access_id }}" \
                    -e "access_key=${{ env.access_key }}" \
                    -e "account=${{ env.account }}" \
                    -e "gitops_repo_user=${{ env.repo_user }}" \
                    -e "gitops_repo_user_token=${{ env.repo_user_token }}" \
                    -e "gitops_repo_user_email=${{ env.repo_user_email }}" \
                    -e "channel_name=${{ github.event.inputs.channel_name }}" \
                    -e "extra_vars=${{ github.event.inputs.extra_vars }}" \
                    -e "chaincode_version=v${{ github.event.inputs.chaincode_version }}" \
                    -e "registry=${{ env.registry }}"

            - name: Deploy new_org prerequisites
              if: github.event.inputs.action == 'new_org'
              run: |
                  ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners \
                    -e "action=new_org_prereq" \
                    -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
                    -e "cluster_name=${{ env.cluster_name }}" \
                    -e "region=${{ env.region }}" \
                    -e "access_id=${{ env.access_id }}" \
                    -e "access_key=${{ env.access_key }}" \
                    -e "account=${{ env.account }}" \
                    -e "gitops_repo_user=${{ env.repo_user }}" \
                    -e "gitops_repo_user_token=${{ env.repo_user_token }}" \
                    -e "gitops_repo_user_email=${{ env.repo_user_email }}" \
                    -e "channel_name=${{ github.event.inputs.channel_name }}" \
                    -e "org_json=${{ github.event.inputs.org_json }}" \
                    -e "registry=${{ env.registry }}"

            - name: Deploy new_org
              if: github.event.inputs.action == 'new_org'
              run: |
                  export ORDERER_TLS_CERT=$(aws secretsmanager get-secret-value --secret-id ${{ github.event.inputs.environment }}-orderer-tls)
                  ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners \
                    -e "action=${{ github.event.inputs.action }}" \
                    -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
                    -e "cluster_name=${{ env.cluster_name }}" \
                    -e "region=${{ env.region }}" \
                    -e "access_id=${{ env.access_id }}" \
                    -e "access_key=${{ env.access_key }}" \
                    -e "account=${{ env.account }}" \
                    -e "gitops_repo_user=${{ env.repo_user }}" \
                    -e "gitops_repo_user_token=${{ env.repo_user_token }}" \
                    -e "gitops_repo_user_email=${{ env.repo_user_email }}" \
                    -e "channel_name=${{ github.event.inputs.channel_name }}" \
                    -e "org_json=${ORDERER_TLS_CERT}" \
                    -e "registry=${{ env.registry }}"

            - name: Deploy add_new_channel
              if: github.event.inputs.action == 'add_new_channel'
              run: |
                  ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners \
                    -e "action=${{ github.event.inputs.action }}" \
                    -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
                    -e "cluster_name=${{ env.cluster_name }}" \
                    -e "region=${{ env.region }}" \
                    -e "access_id=${{ env.access_id }}" \
                    -e "access_key=${{ env.access_key }}" \
                    -e "account=${{ env.account }}" \
                    -e "gitops_repo_user=${{ env.repo_user }}" \
                    -e "gitops_repo_user_token=${{ env.repo_user_token }}" \
                    -e "gitops_repo_user_email=${{ env.repo_user_email }}" \
                    -e "channel_name=${{ github.event.inputs.channel_name }}" \
                    -e "extra_vars=${{ github.event.inputs.extra_vars }}" \
                    -e "registry=${{ env.registry }}"

            - name: Deploy add_new_org
              if: github.event.inputs.action == 'add_new_org'
              run: |
                  export ORG_MSP=$(aws secretsmanager get-secret-value --secret-id ${{ github.event.inputs.environment }}-${{ github.event.inputs.add_org_name }}-msp --version-stage AWSCURRENT | jq -r .SecretString)
                  ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners \
                    -e "action=${{ github.event.inputs.action }}" \
                    -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
                    -e "cluster_name=${{ env.cluster_name }}" \
                    -e "region=${{ env.region }}" \
                    -e "access_id=${{ env.access_id }}" \
                    -e "access_key=${{ env.access_key }}" \
                    -e "account=${{ env.account }}" \
                    -e "gitops_repo_user=${{ env.repo_user }}" \
                    -e "gitops_repo_user_token=${{ env.repo_user_token }}" \
                    -e "gitops_repo_user_email=${{ env.repo_user_email }}" \
                    -e "channel_name=${{ github.event.inputs.channel_name }}" \
                    -e "org_json=${ORG_MSP}" \
                    -e "add_org=${{ github.event.inputs.add_org_name }}" \
                    -e "registry=${{ env.registry }}"

            - name: Deploy join_peer
              if: github.event.inputs.action == 'join_peer'
              run: |
                  ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners \
                    -e "action=${{ github.event.inputs.action }}" \
                    -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" \
                    -e "cluster_name=${{ env.cluster_name }}" \
                    -e "region=${{ env.region }}" \
                    -e "access_id=${{ env.access_id }}" \
                    -e "access_key=${{ env.access_key }}" \
                    -e "account=${{ env.account }}" \
                    -e "gitops_repo_user=${{ env.repo_user }}" \
                    -e "gitops_repo_user_token=${{ env.repo_user_token }}" \
                    -e "gitops_repo_user_email=${{ env.repo_user_email }}" \
                    -e "channel_name=${{ github.event.inputs.channel_name }}" \
                    -e "registry=${{ env.registry }}"

            - name: Pre-register users for application
              if: github.event.inputs.action == 'register_users'
              run: |
                  ansible-playbook pre-register-users.yml -i ./inventory/ansible_provisioners \
                    -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml"
