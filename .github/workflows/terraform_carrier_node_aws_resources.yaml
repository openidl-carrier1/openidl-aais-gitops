# This workflow is used to deploy carrier_node - AWS specific resources in aws using terraform with github actions pipeline
# On pull request to carrier_dev/test/prod this will run terraform init, fmt, validate and plan.
# On push event to carrier_dev/test/prod this will run terraform apply
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
# Documentation for  `aws-actions/configure-aws-credentials` is located here: https://github.com/aws-actions/configure-aws-credentials

#Author: Rajesh Sanjeevi
#Version: 1.0

name: 'carrier-node-openidl-aws-resources-pipeline-v1.0'
on:
  push:
    paths:
      - 'aws/aws_resources/**'
      - 'aws/tf_s3_backend/aws_resources'

    branches:
      - carrier_dev
      - carrier_test
      - carrier_prod

  pull_request:
    paths:
      - 'aws/aws_resources/**'
      - 'aws/tf_s3_backend/aws_resources'

    branches:
      - carrier_dev
      - carrier_test
      - carrier_prod

jobs:
  carrier_node_dev-aws_resources:
    environment: carrier_dev

    if: github.base_ref == 'carrier_dev' || github.ref == 'refs/heads/carrier_dev'
    name: 'carrier-node-dev-aws-resources'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: aws/aws_resources
    env:
      TF_VAR_aws_account_number: ${{ secrets.aws_account_number }}
      TF_VAR_aws_role_arn: ${{ secrets.aws_role_arn }}
      TF_VAR_aws_user_arn: ${{ secrets.aws_user_arn }}
      TF_VAR_aws_region: ${{ secrets.aws_region }}
      TF_VAR_app_bastion_ssh_key: ${{ secrets.app_bastion_ssh_key }}
      TF_VAR_blk_bastion_ssh_key: ${{ secrets.blk_bastion_ssh_key }}
      TF_VAR_app_eks_worker_nodes_ssh_key: ${{ secrets.app_eks_worker_nodes_ssh_key }}
      TF_VAR_blk_eks_worker_nodes_ssh_key: ${{ secrets.blk_eks_worker_nodes_ssh_key }}
      TF_VAR_ses_email_identity: ${{ secrets.ses_email_identity }}
      TF_VAR_userpool_email_source_arn: ${{ secrets.userpool_email_source_arn }}
      TF_VAR_app_cluster_map_users: ${{ secrets.app_cluster_map_users }}
      TF_VAR_blk_cluster_map_users: ${{ secrets.blk_cluster_map_users }}
      TF_VAR_app_cluster_map_roles: ${{ secrets.app_cluster_map_roles }}
      TF_VAR_blk_cluster_map_roles: ${{ secrets.blk_cluster_map_roles }}
      TF_VAR_aws_access_key: ${{ secrets.aws_access_key }}
      TF_VAR_aws_secret_key: ${{ secrets.aws_secret_key }}
      TF_VAR_aws_external_id: ${{ secrets.aws_external_id }}
      aws_input_bucket : ${{ secrets.aws_input_bucket }}

    steps:
    # Option:1 Configuring aws cli utilizing secrets from GIT SECRETS
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@230d25f14e841bc8e06b5f4ff89ccd6989fc1d71
      with:
        aws-access-key-id: ${{ secrets.aws_access_key }}
        aws-secret-access-key: ${{ secrets.aws_secret_key }}
        aws-region: ${{ secrets.aws_region }}
        role-to-assume: ${{ secrets.aws_role_arn }}
        role-external-id: ${{ secrets.aws_external_id }}
        role-duration-seconds: 3600 # session valid for 30 minutes
        role-session-name: terraform-session
        role-skip-session-tagging: true

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout Code
      uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

    - name: Setup utilities
      id: utilities
      run: |
        sudo apt-get update
        sudo apt install curl
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        sudo unzip awscliv2.zip >> /dev/null
        sudo ./aws/install || sudo ./aws/install --update
        curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
        sudo chmod +x ./aws-iam-authenticator
        mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
        echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        aws s3 cp s3://${{env.aws_input_bucket}}/carrier.tfvars ../carrier_dev.tfvars

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@a504130155a42639c3c62d0fafc9ff047dcfdb8b
      with:
        terraform_version: 1.0.0
        terraform_wrapper: true

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: format
      run: terraform fmt -recursive

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init -backend-config=../tf_s3_backend/aws_resources

    # Checks that all Terraform configuration files adhere for syntax
    - name: Terraform Syntax
      id: validate
      run: terraform validate -no-color -json

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -var-file=../carrier_dev.tfvars -out=aws_resources_plan.out && terraform show -json aws_resources_plan.out > aws_resources_plan.out.json
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/carrier_dev' && github.event_name == 'push'
      run: terraform apply -auto-approve -var-file=../carrier_dev.tfvars

  carrier_node_test-aws_resources:
    environment: carrier_test

    if: github.base_ref == 'carrier_test' || github.ref == 'refs/heads/carrier_test'
    name: 'carrier-node-test-aws-resources'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: aws/aws_resources
    env:
      TF_VAR_aws_account_number: ${{ secrets.aws_account_number }}
      TF_VAR_aws_role_arn: ${{ secrets.aws_role_arn }}
      TF_VAR_aws_user_arn: ${{ secrets.aws_user_arn }}
      TF_VAR_aws_region: ${{ secrets.aws_region }}
      TF_VAR_app_bastion_ssh_key: ${{ secrets.app_bastion_ssh_key }}
      TF_VAR_blk_bastion_ssh_key: ${{ secrets.blk_bastion_ssh_key }}
      TF_VAR_app_eks_worker_nodes_ssh_key: ${{ secrets.app_eks_worker_nodes_ssh_key }}
      TF_VAR_blk_eks_worker_nodes_ssh_key: ${{ secrets.blk_eks_worker_nodes_ssh_key }}
      TF_VAR_ses_email_identity: ${{ secrets.ses_email_identity }}
      TF_VAR_userpool_email_source_arn: ${{ secrets.userpool_email_source_arn }}
      TF_VAR_app_cluster_map_users: ${{ secrets.app_cluster_map_users }}
      TF_VAR_blk_cluster_map_users: ${{ secrets.blk_cluster_map_users }}
      TF_VAR_app_cluster_map_roles: ${{ secrets.app_cluster_map_roles }}
      TF_VAR_blk_cluster_map_roles: ${{ secrets.blk_cluster_map_roles }}
      TF_VAR_aws_access_key: ${{ secrets.aws_access_key }}
      TF_VAR_aws_secret_key: ${{ secrets.aws_secret_key }}
      TF_VAR_aws_external_id: ${{ secrets.aws_external_id }}
      aws_input_bucket : ${{ secrets.aws_input_bucket }}

    steps:
    # Option:1 Configuring aws cli utilizing secrets from GIT SECRETS
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@230d25f14e841bc8e06b5f4ff89ccd6989fc1d71
      with:
        aws-access-key-id: ${{ secrets.aws_access_key }}
        aws-secret-access-key: ${{ secrets.aws_secret_key }}
        aws-region: ${{ secrets.aws_region }}
        role-to-assume: ${{ secrets.aws_role_arn }}
        role-external-id: ${{ secrets.aws_external_id }}
        role-duration-seconds: 3600 # session valid for 30 minutes
        role-session-name: terraform-session
        role-skip-session-tagging: true

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout Code
      uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

    - name: Setup utilities
      id: utilities
      run: |
        sudo apt-get update
        sudo apt install curl
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        sudo unzip awscliv2.zip >> /dev/null
        sudo ./aws/install || sudo ./aws/install --update
        curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
        sudo chmod +x ./aws-iam-authenticator
        mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
        echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        aws s3 cp s3://${{env.aws_input_bucket}}/carrier.tfvars ../carrier_test.tfvars

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@a504130155a42639c3c62d0fafc9ff047dcfdb8b
      with:
        terraform_version: 1.0.0
        terraform_wrapper: true

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: format
      run: terraform fmt -recursive

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init -backend-config=../tf_s3_backend/aws_resources

    # Checks that all Terraform configuration files adhere for syntax
    - name: Terraform Syntax
      id: validate
      run: terraform validate -no-color -json

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -var-file=../carrier_test.tfvars -out=aws_resources_plan.out && terraform show -json aws_resources_plan.out > aws_resources_plan.out.json
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/carrier_test' && github.event_name == 'push'
      run: terraform apply -auto-approve -var-file=../carrier_test.tfvars

  carrier_node_prod-aws_resources:
    environment: carrier_prod

    if: github.base_ref == 'carrier_prod' || github.ref == 'refs/heads/carrier_prod'
    name: 'carrier-node-prod-aws-resources'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: aws/aws_resources
    env:
      TF_VAR_aws_account_number: ${{ secrets.aws_account_number }}
      TF_VAR_aws_role_arn: ${{ secrets.aws_role_arn }}
      TF_VAR_aws_user_arn: ${{ secrets.aws_user_arn }}
      TF_VAR_aws_region: ${{ secrets.aws_region }}
      TF_VAR_app_bastion_ssh_key: ${{ secrets.app_bastion_ssh_key }}
      TF_VAR_blk_bastion_ssh_key: ${{ secrets.blk_bastion_ssh_key }}
      TF_VAR_app_eks_worker_nodes_ssh_key: ${{ secrets.app_eks_worker_nodes_ssh_key }}
      TF_VAR_blk_eks_worker_nodes_ssh_key: ${{ secrets.blk_eks_worker_nodes_ssh_key }}
      TF_VAR_ses_email_identity: ${{ secrets.ses_email_identity }}
      TF_VAR_userpool_email_source_arn: ${{ secrets.userpool_email_source_arn }}
      TF_VAR_app_cluster_map_users: ${{ secrets.app_cluster_map_users }}
      TF_VAR_blk_cluster_map_users: ${{ secrets.blk_cluster_map_users }}
      TF_VAR_app_cluster_map_roles: ${{ secrets.app_cluster_map_roles }}
      TF_VAR_blk_cluster_map_roles: ${{ secrets.blk_cluster_map_roles }}
      TF_VAR_aws_access_key: ${{ secrets.aws_access_key }}
      TF_VAR_aws_secret_key: ${{ secrets.aws_secret_key }}
      TF_VAR_aws_external_id: ${{ secrets.aws_external_id }}
      aws_input_bucket : ${{ secrets.aws_input_bucket }}

    steps:
    # Option:1 Configuring aws cli utilizing secrets from GIT SECRETS
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@230d25f14e841bc8e06b5f4ff89ccd6989fc1d71
      with:
        aws-access-key-id: ${{ secrets.aws_access_key }}
        aws-secret-access-key: ${{ secrets.aws_secret_key }}
        aws-region: ${{ secrets.aws_region }}
        role-to-assume: ${{ secrets.aws_role_arn }}
        role-external-id: ${{ secrets.aws_external_id }}
        role-duration-seconds: 3600 # session valid for 30 minutes
        role-session-name: terraform-session
        role-skip-session-tagging: true

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout Code
      uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

    - name: Setup utilities
      id: utilities
      run: |
        sudo apt-get update
        sudo apt install curl
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        sudo unzip awscliv2.zip >> /dev/null
        sudo ./aws/install || sudo ./aws/install --update
        curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
        sudo chmod +x ./aws-iam-authenticator
        mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
        echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        aws s3 cp s3://${{env.aws_input_bucket}}/carrier.tfvars ../carrier_prod.tfvars

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@a504130155a42639c3c62d0fafc9ff047dcfdb8b
      with:
        terraform_version: 1.0.0
        terraform_wrapper: true

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: format
      run: terraform fmt -recursive

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init -backend-config=../tf_s3_backend/aws_resources

    # Checks that all Terraform configuration files adhere for syntax
    - name: Terraform Syntax
      id: validate
      run: terraform validate -no-color -json

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -var-file=../carrier_prod.tfvars -out=aws_resources_plan.out && terraform show -json aws_resources_plan.out > aws_resources_plan.out.json
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/carrier_prod' && github.event_name == 'push'
      run: terraform apply -auto-approve -var-file=../carrier_prod.tfvars