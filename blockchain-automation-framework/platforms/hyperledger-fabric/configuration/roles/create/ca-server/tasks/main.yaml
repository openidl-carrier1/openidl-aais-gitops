#############################################################################################
# This role generate initial CA certs and push them to vault
# Also, creates the value file for Certificate Authority (CA)
#############################################################################################

- name: Check if ca certs already created
  shell: |
    vault kv get -field=ca.{{ component_name }}-cert.pem {{ vault.secret_path | default('secret') }}/crypto/{{ component_type }}Organizations/{{ component_name }}/ca
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_ca_result
  changed_when: false
  ignore_errors: yes

############################################################################################
# This task creates the folder to store crypto material
- name: "creating the directory ./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/ca"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    path: "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/ca"
    check: "ensure_dir"

- name: Get ca certs and key
  shell: |
    vault kv get -field=ca.{{ component_name }}-cert.pem {{ vault.secret_path | default('secret') }}/crypto/{{ component_type }}Organizations/{{ component_name }}/ca > ca.{{ component_name }}-cert.pem
    mv ca.{{ component_name }}-cert.pem ./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/ca/
    vault kv get -field={{ component_name }}-CA.key {{ vault.secret_path | default('secret') }}/crypto/{{ component_type }}Organizations/{{ component_name }}/ca > {{ component_name }}-CA.key
    mv {{ component_name }}-CA.key ./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/ca/
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: vault_ca_result.failed == False


#####################################################################################
  #This task checks if the CA key is already present or not
- name: "Check if the CA.key is already present"
  stat:
    path: "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/ca/{{ component_name }}-CA.key"
  register: ca_key_check

############################################################################################
# This task generates initial CA certificates
- name: Generate the CA certificate
  shell: |
    cd "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/ca"
    openssl ecparam -name prime256v1 -genkey -noout -out {{ component_name }}-CA.key
    openssl req -x509 -config "{{playbook_dir}}/openssl.conf" -new -nodes -key {{ component_name }}-CA.key -days 1024 -out ca.{{ component_name }}-cert.pem -extensions v3_req -subj "{{ ca.subject }}"
  when: vault_ca_result.failed == True and  not ca_key_check.stat.exists

############################################################################################
# This task copy the CA certificates generated above, to the Vault
- name: Copy the crypto material to Vault
  shell: |
    vault write {{ vault.secret_path | default('secret') }}/crypto/{{ component_type }}Organizations/{{ component_name }}/ca ca.{{ component_name }}-cert.pem="$(cat "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/ca/ca.{{ component_name }}-cert.pem")" {{ component_name }}-CA.key="$(cat "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/ca/{{ component_name }}-CA.key")"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: vault_ca_result.failed == True
  changed_when: false


- name: Check if ca admin credentials already created
  shell: |
    vault kv get {{ vault.secret_path | default('secret') }}/credentials/{{ component_name }}/ca/{{ component }}
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_caadmin_result
  ignore_errors: yes
  changed_when: false

############################################################################################
# This task write the CA server admin credentials to Vault
- name: Write the ca server admin credentials to Vault
  shell: |
    vault write {{ vault.secret_path | default('secret') }}/credentials/{{ component_name }}/ca/{{ component }} user="{{ component }}-adminpw"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: vault_caadmin_result.failed == True  # run only when vault_caadmin_result failed


# Check if Ambassador credentials exist already
- name: Check Ambassador cred exists
  k8s_info:
    kind: Secret
    namespace: default
    name: ca-{{ component_name }}-ambassador-certs
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: get_secret
  when: 
    - network.env.proxy == 'ambassador'

#####################################################################################################################
# This task creates the Ambassador TLS credentials
- name: Create the Ambassador credentials
  shell: |
    KUBECONFIG={{ kubernetes.config_file }} kubectl create secret tls ca-{{ component_name }}-ambassador-certs --cert=./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/ca/ca.{{ component_name }}-cert.pem --key=./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/ca/{{ component_name }}-CA.key -n default
  when: 
    - network.env.proxy == 'ambassador'
    - get_secret.resources|length == 0

############################################################################################
# This task creates the CA value file for Orderer
- name: "Create CA server values for Orderer"
  include_role:
    name: helm_component
  vars:
    name: "{{ ca.name }}"
    type: "ca-orderer"
    ca_image: "hyperledger/fabric-ca:{{ ca_image_version[network.version] }}"
    alpine_image: "{{ docker_url }}/alpine-utils:1.0"
    git_url: "{{ gitops.git_url }}"
    git_branch: "{{ gitops.branch }}"
    charts_dir: "{{ gitops.chart_source }}"
    external_url_suffix: "{{ item.external_url_suffix }}"
  when: component_type == 'orderer'

############################################################################################
# This task creates the CA value file for Organizations
- name: "Create CA server values organizations"
  include_role:
    name: helm_component
  vars:
    name: "{{ ca.name }}"
    type: "ca-peer"
    ca_image: "hyperledger/fabric-ca:{{ ca_image_version[network.version] }}"
    alpine_image: "{{ docker_url }}/alpine-utils:1.0"
    git_url: "{{ gitops.git_url }}"
    git_branch: "{{ gitops.branch }}"
    charts_dir: "{{ gitops.chart_source }}"
    external_url_suffix: "{{ item.external_url_suffix }}"
  when: component_type == 'peer'

#Git Push : Pushes the above generated files to git directory 
- name: Git Push
  include_role: 
    name: "{{ playbook_dir }}/../../shared/configuration/roles/git_push"
  vars:
    GIT_DIR: "{{ playbook_dir }}/../../../.."
    gitops: "{{ item.gitops }}"
    GIT_RESET_PATH: "platforms/hyperledger-fabric/configuration"
    msg: "[ci skip] Pushing CA server files"
  tags:
    - notest
