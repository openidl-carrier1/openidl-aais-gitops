# Copy the crypto material for orgs
- name: Copy the crypto material for orgs
  shell: |
    vault write {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/tls ca.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/tls/ca.crt)" server.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/tls/server.crt)" server.key="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/tls/server.key)"
    vault write {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp admincerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/admincerts/Admin@{{ component_name }}-cert.pem)" cacerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/cacerts/ca-{{ component_name }}-{{ item.external_url_suffix }}-8443.pem)" keystore="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/keystore/*_sk)" signcerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/signcerts/cert.pem)" tlscacerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/tlscacerts/ca-{{ component_name }}-{{ item.external_url_suffix }}-8443.pem)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: vault_msp_result.failed == True and network.env.proxy != 'none'

# Copy the crypto material for orgs (proxy is none)
- name: Copy the crypto material for orgs
  shell: |
    vault write {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/tls ca.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/tls/ca.crt)" server.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/tls/server.crt)" server.key="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/tls/server.key)"
    vault write {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp admincerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/admincerts/Admin@{{ component_name }}-cert.pem)" cacerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/cacerts/ca-{{ component_name }}-7054.pem)" keystore="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/keystore/*_sk)" signcerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/signcerts/cert.pem)" tlscacerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/tlscacerts/ca-{{ component_name }}-7054.pem)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: vault_msp_result.failed == True and network.env.proxy == 'none'  

# This task create the directories if it is not present 
- name: Create the peer certificate directory if it does not exist
  file:
    path: "{{ peer.certificate | dirname }}"
    state: directory
  when: peer.certificate is defined

# This task generate the ca.crt file if it is not present.
- name: Create the ca.crt for peers if it is not present
  file:
    path: "{{ peer.certificate }}"
    state: touch
  when: peer.certificate is defined
  tags:
    - molecule-idempotence-notest

# This task copy the peer certificate to the path provided in network.yaml
- name: Copy msp cacerts from auto-generated path to given path
  copy:
    src: "./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/cacerts/ca-{{ component_name }}-{{ item.external_url_suffix }}-8443.pem"
    dest: "{{ peer.certificate }}"
    follow: no
    force: yes
  when: 
    - item.org_status == 'new'
    - peer.certificate is defined
    - network.env.proxy != 'none'
  tags:
    - notest

# This task copy the peer certificate to the path provided in network.yaml (when proxy is none)
- name: Copy msp cacerts from auto-generated path to given path
  copy:
    src: "./build/crypto-config/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/msp/cacerts/ca-{{ component_name }}-7054.pem"
    dest: "{{ peer.certificate }}"
    follow: no
    force: yes
  when: 
    - item.org_status == 'new'
    - peer.certificate is defined
    - network.env.proxy == 'none'
  tags:
    - notest    

# Check if Ambassador credentials exist already
- name: Check Ambassador cred exists
  k8s_info:
    kind: Secret
    namespace: default
    name: "{{ peer.name }}-{{ component_name }}-ambassador-certs"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: get_peer_secret
  when: 
    - network.env.proxy == 'ambassador'

#Check the existence of Peer ambassador certs secret in the vault 
- name: Check if peer ambassador secrets certs created
  shell: |
    vault kv get -format=yaml {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/ambassador
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_peer_ambassador
  when: 
    - network.env.proxy == 'ambassador'
  ignore_errors: yes
  changed_when: false

- name: Get peer ambassador info
  include_role: 
    name: "setup/get_ambassador_crypto"
  vars:
    vault_output: "{{ vault_peer_ambassador.stdout | from_yaml }}"
    type: "peer"
    peer_ambassador_path: "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}"
  when: 
    - network.env.proxy == 'ambassador'
    - not vault_peer_ambassador.failed
  tags:
  - notest

#Check if the openssl file is created or not
- name: Check if the openssl file is created or not
  stat:
    path: "./build/crypto-config/peerOrganizations/{{ component_name }}/openssl.conf"
  register: openssl_file_check

# Generates the openssl file for domain
- name: Generate openssl conf file
  shell: |
    cd "./build/crypto-config/peerOrganizations/{{ component_name }}"
    cat <<EOF >openssl.conf
    [req]
    req_extensions = v3_req
    distinguished_name = dn

    [dn]

    [v3_req]
    basicConstraints = critical, CA:TRUE
    keyUsage = critical,digitalSignature, keyEncipherment, keyCertSign, cRLSign
    subjectKeyIdentifier = hash
    subjectAltName = DNS:*.{{ item.external_url_suffix }}
    EOF
  vars:
    domain_name: "{{ component_name }}.{{ item.external_url_suffix }}"  
  when: 
    - network.env.proxy == 'ambassador'
    - vault_peer_ambassador.failed 
    - not openssl_file_check.stat.exists
  changed_when: false

#Check if the key exist or not
- name: Check if the key exist or not
  stat:
    path: "./build/crypto-config/peerOrganizations/{{ component_name }}/{{ peer.name }}-{{ component_name }}.key"
  register: peer_key_check
    
# This task generates peer certificates
- name: Generate the peer certificate
  shell: |
    cd "./build/crypto-config/peerOrganizations/{{ component_name }}"
    openssl ecparam -name prime256v1 -genkey -noout -out {{ peer.name }}-{{ component_name }}.key
    openssl req -config ./openssl.conf -new -nodes -key {{ peer.name }}-{{ component_name }}.key -days 1000 -out {{ peer.name }}-{{ component_name }}.csr -extensions v3_req -subj "/{{ cert_subject }}/CN={{ peer.name }}.{{ component_name }}.{{item.external_url_suffix}}"
    openssl x509 -extfile ./openssl.conf -req -days 1000 -in {{ peer.name }}-{{ component_name }}.csr -CA ./ca/ca.{{ component_name }}-cert.pem -CAkey ./ca/{{ component_name }}-CA.key -out {{ peer.name }}-{{ component_name }}.pem -set_serial 01 -extensions v3_req
    cat {{ peer.name }}-{{ component_name }}.pem > {{ peer.name }}-{{ component_name }}-certchain.pem
    cat ./ca/ca.{{ component_name }}-cert.pem >> {{ peer.name }}-{{ component_name }}-certchain.pem
  when: 
    - network.env.proxy == 'ambassador'
    - get_peer_secret.resources|length == 0 
    - vault_peer_ambassador.failed 
    - not peer_key_check.stat.exists

# This task creates the Ambassador TLS credentials for peer
- name: Create the Ambassador credentials
  shell: |
    KUBECONFIG={{ kubernetes.config_file }} kubectl create secret tls {{ peer.name }}-{{ component_name }}-ambassador-certs --cert=./build/crypto-config/peerOrganizations/{{ component_name }}/{{ peer.name }}-{{ component_name }}-certchain.pem --key=./build/crypto-config/peerOrganizations/{{ component_name }}/{{ peer.name }}-{{ component_name }}.key -n default
  when: 
    - network.env.proxy == 'ambassador'
    - get_peer_secret.resources|length == 0 
    - vault_peer_ambassador.failed
  tags:
  - molecule-idempotence-notest 

# This task copy the peer certificates generated above, to the Vault
- name: Copy the crypto material to Vault
  shell: |
    vault write {{ vault.secret_path | default('secret') }}/crypto/{{ component_type }}Organizations/{{ component_name }}/ambassador clientcert="$(cat "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/{{ peer.name }}-{{ component_name }}.pem")" certificate="$(cat "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/{{ peer.name }}-{{ component_name }}-certchain.pem")" key="$(cat "./build/crypto-config/{{ component_type }}Organizations/{{ component_name }}/{{ peer.name }}-{{ component_name }}.key")"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: 
    - network.env.proxy == 'ambassador'
    - vault_peer_ambassador.failed
